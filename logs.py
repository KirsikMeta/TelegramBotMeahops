import json
from datetime import datetime

LOG_FILE = "logs.json"

def load_logs():
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_logs(logs):
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

def log_user_session(user_id, score, total):
    logs = load_logs()
    user_key = f"user_{user_id}"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    passed = score >= total // 2

    test_number = len(logs.get(user_key, [])) + 1

    if user_key not in logs:
        logs[user_key] = []

    logs[user_key].append({
        "timestamp": timestamp,
        "test_number": test_number,
        "score": score,
        "total": total,
        "passed": passed
    })

    save_logs(logs)

def get_user_stats(user_id):
    logs = load_logs()
    user_key = f"user_{user_id}"
    user_logs = logs.get(user_key, [])
    if not user_logs:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
    
    total_tests = len(user_logs)
    passed_tests = sum(1 for log in user_logs if log["passed"])
    avg_score = sum(log["score"] for log in user_logs) / total_tests if total_tests > 0 else 0

    stats_text = f"""
 –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}
 –ü—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {passed_tests}
 –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}
–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}/50
    """
    
    stats_text += "\nüìù –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤:\n"
    for log in user_logs:
        status = "+" if log["passed"] else "-"
        stats_text += f"{log['test_number']}. {log['timestamp']} ‚Äî {log['score']}/{log['total']} {status}\n"

    return stats_text

def get_user_past_results(user_id):
    logs = load_logs()
    user_key = f"user_{user_id}"
    user_logs = logs.get(user_key, [])
    if not user_logs:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."

    result_text = "–í–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ –ø–æ–ø—ã—Ç–∫–∏:\n\n"
    for log in user_logs:
        status = "–ü—Ä–æ–π–¥–µ–Ω" if log["passed"] else "–ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        result_text += f" {log['timestamp']}\n –†–µ–∑—É–ª—å—Ç–∞—Ç: {log['score']}/{log['total']} ‚Äî {status}\n\n"
    return result_text
