from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json

#–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ questions
def load_questions():
    try:
        with open('questions.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            #open('questions.json', 'r', encoding='utf-8') as f:data = json.load(f)
        if not isinstance(data, dict) or "questions" not in data:
            raise ValueError("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'questions'")
        for i, q in enumerate(data["questions"]):
            if not isinstance(q, dict):
                raise ValueError(f"–í–æ–ø—Ä–æ—Å {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
            if "options" not in q:
                raise ValueError(f"–í–æ–ø—Ä–æ—Å {i+1} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è 'options'")
        return data["questions"]
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        exit(1)

questions = load_questions()
current_q_index = {}
user_results = {}

#–û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_q_index[user_id] = 0
    user_results[user_id] = {"answers": [], "score": 0}
    await ask_question_from_message(update.effective_message, context, user_id)

async def ask_question_from_message(message, context, user_id):
    q = questions[current_q_index[user_id]]

    keyboard = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(q["options"])]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(q["question"], reply_markup=reply_markup)

#–≠—Ç–æ –∞—Å–∏–Ω—Ö –∫–æ–¥.–∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—à–∏–±–æ–∫
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    option_index = int(query.data)
    selected_option = questions[current_q_index[user_id]]["options"][option_index]
    q = questions[current_q_index[user_id]]

    user_results[user_id]["answers"].append({
        "question": q["question"],
        "user_answer": selected_option,
        "correct": selected_option == q["correct_answer"]
    })

    if selected_option == q["correct_answer"]:
        user_results[user_id]["score"] += 1
        await query.edit_message_text(text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {q['question']}\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {selected_option}")
    else:
        await query.edit_message_text(text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")

    current_q_index[user_id] += 1

    if current_q_index[user_id] < len(questions):
        await ask_question_from_message(query.message, context, user_id)
    else:
        await show_results(query.message, user_id)
#–û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
async def show_results(message, user_id):
    results = user_results[user_id]
    total = len(questions)
    score = results["score"]
    passed = score >= total // 2

    result_text = f"""
üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}
{'üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' if passed else '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.'}
    """

    keyboard = [
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="download_results")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="restart_test")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –ø–æ–ø—ã—Ç–∫–∏", callback_data="show_past_results")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(result_text, reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
    from logs import log_user_session
    log_user_session(user_id, score, total)

async def handle_end_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "download_results":
        result_text = format_results(user_id)
        await query.message.reply_text("–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + result_text)
    elif query.data == "restart_test":
        current_q_index[user_id] = 0
        user_results[user_id] = {"answers": [], "score": 0}
        await ask_question_from_message(query.message, context, user_id)
    elif query.data == "show_past_results":
        from logs import get_user_past_results
        past_results = get_user_past_results(user_id)
        await query.message.reply_text(past_results)

#–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ( –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)
def format_results(user_id):
    results = user_results[user_id]
    lines = []
    for i, ans in enumerate(results["answers"]):
        lines.append(f"{i+1}. {ans['question']}\n   –í–∞—à –æ—Ç–≤–µ—Ç: {ans['user_answer']}\n   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {ans['correct']}\n")
    return "\n".join(lines)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    from logs import get_user_stats
    stats_text = get_user_stats(user_id)
    await update.message.reply_text(stats_text)

def main():
    app = Application.builder().token("–°–µ–∫—Ä–µ—Ç–∏–∫").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern=r"^(?!download_results|restart_test|show_past_results)"))
    app.add_handler(CallbackQueryHandler(handle_end_buttons, pattern=r"^(download_results|restart_test|show_past_results)$"))
    app.run_polling()

if __name__ == '__main__':
    main()
